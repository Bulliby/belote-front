Class Rand generic qui permet d'effectuer la randomisation de la poigné de carte.
Une Class carte avec une Shape et une Value.
    J'instancie le tas de carte et les distribuent en fonction de leur index.
        Je cree une factory qui permet l'instancation d'un jeu de cartes d'une certaine taille.
        Je commence par une Shape et créé toutes les values.
    Je réindex le tas de carte à chaque carte distribué pour que le Rand puisse la trouver.
Une Class Palyer avec un HasMany sur les cartes.
    Cote serveur il y aura quatre classes player avec leur cartes
    Une classe Player cote client avec ces cartes
Une class de validation qui permettra de voir si c'est un coup légal (bonne shape, valeur suffisament haute)
    Cette classe sera partagé entre le serveur et le client et fera les mêmes verifications
        Si le serveur remarque que la requete est invalide et qu'elle n'a pas ete par consequent passe par le client une procedure de ban est lancé.
        La verification entrainera la creation d'un class plie qui continendra un certain nombre de carte
            Cette class plie servira de context avant la pose de la carte par le joueur et permettra sa verification
                La verification sera effectue par une classe VERIF elle prendra la carte a jouer et le plie courant pour accepter ou refuser une carte.
Le serveur renverra son jeu complet à chaque tour au joueur
    Il faudra une class de serialistation et de désrialistions afin d'effectuer les actions IO avec les websockets.
        Cette classe sera partage par le client et le serveur

WEBSOCKET AUTH
Un serveur d'authentication php connecte a une DB mysql
Un service d'authentication basic mdp email
Une table user avec mdp email et token
Le client utilise le formulaire de l'applicaton vue.js qui fait une requete d'api pour authentificaton vers auth.belotte
    Voir si nécessité du csrf token ? NON
    Si ils sont accepté un nouveau token est generer, enreistrer dans redis et renvoyer à l'application vue.js
        Ce token est envoyé à chaque requete websocker dans le header et verifier grace a redis.
        Quand l'utlisateur se deconnect ou ping out le token de redis est remis à NULL
            Lors de la connexion sur le site le token doit etre a NULL dans redis sinon cela veut dire que la personne est encore connecte
                Ce token permettra de récuperer les informations utilisateur mysql
                    Ainsi on pourra enregistre des stats en faisant des requetes serveur à serveur

ARCHITECTURE
    _Server REDIS stock pour l'instant uniquement le token des utilisateurs connecté et permet de faire le lien d'authentication entre le client websocket et le serveur node.
    _Un serveur NODE qui gère l'arriver des requetes WS. Et qui applique toutes les vérifications nécessaire au bon déroulement du jeu.
    _Un client pour l'instant en vue.js qui possède des classes typescript commune avec le serveur node.js par exemple pour les verfications inhérentes aux regles de jeu.
    _Un serveur d'autentication laravel/MySql qui permet d'authentifier les joueurs et d'enregistrer des stats. Voir pour un laravel allege type lumen.
    _Une api pour le serveur node.js unqiquement accessible depuis le server (localhost) elle contiendra les stats et infos en base dont le server node.js pourrait avoir besoin
        (Voir l'utilité de faire une API distinct. Pk ne pas utiliser directement la base du server?)
    _Une api cliente public qui pourrait etre consulté par des sites tiers afin d'affciher des stats par exemple.

ARCHITECTURE en détail.
    _Le client vue.js aura un form d'autenctaion qui touchera le serveur d'authanticatoion avec une certaine route sur des parametres POST.
        Il devra avoir une protection contre le bruteforce
        Quand le client sera connecte le serveur renverra le token Redis qui ne sera persisté d'aucune maniere et servira durant le temps de l'éxecution.
    _Le serveur d'authentication sera directment relie avec le serveur websocker qui par une API et des requetes HTTP enregistera les stats des joueurs en base.

Voir pour un csrf token au niveau du login vue.js. Voir ce qu'il est possible de faire pour la securite pour la communication du server node avec l'api qui stockera les stats

GAME
La verfication de la carte jouée se fait cote serveur et cote client. Un package de rules permettra de ne pas dupliquer le code.
Un objet infoPartie instancié à chaque début de partie contiendra la couleur/forme de l'Atout. Il contiendra également l'id du donneur ce qui permettra de déduire le joueur à entammer la partie.
Un seconde objet infoPartieEnCours contiendra la carte attendu pour le plie. Se sera la première joué par le joueur ayant la main.
Cote client nous n'effecturons aucun calucl de point
    En revanche une routine permettra de vérifier la validité du coup en fonction de infoPartieEnCours et infoPartie.
Quand cela sera son tour le client enverra la carte qu'il joue au serveur. Cette carte sera grâce a la verification côté client valide.
    Le serveur ne pourra cependant pas compter dessus et effectuer de nouveau les mêmes vérifications.
        _ Est ce que la carte recus viens du joueur a qui c'est le tour de jouer.
        _ Est ce que c'est une carte légale.
    Si le serveur détectte une erreur de vérification c'est sûrement que la requete a ete crafté et par consequent mon idee est de carrement bannir son compte par intransigance...
Quand les joueurs auront tous joué le serveur appliquera une routine afin de savoir qui est le gagnant du plie.
